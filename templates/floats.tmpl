package tort

import (
	"fmt"
	"reflect"
)

// Code generated from templates/floats.tmpl; DO NOT EDIT.

// Float{{.Bits}}Assertions are tests around float (float{{.Bits}}) values.
type Float{{.Bits}}Assertions struct {
	Assertions
	name string
	num float{{.Bits}}
}

// Float{{.Bits}} identifies an float variable value and returns test functions for its values.
func (assert Assertions) Float{{.Bits}}(value float{{.Bits}}) FloatAssertions {
	return FloatAssertions{
		Assertions: assert,
		name: "float{{.Bits}}",
		num: value,
	}
}

// Float looks for the given struct field, confirms it's an float{{.Bits}}, and returns the assertions valid for
// the float.
func (assert StructAssertions) Float{{.Bits}}(field string) FloatAssertions {
	name := fmt.Sprintf("%s.%s", assert.Type(), field)
	property := assert.Field(field)

	if property.Kind() != reflect.Float{{.Bits}} {
		assert.Fatal("field %s is not an float{{.Bits}}", name)
	}

	return FloatAssertions{
		Assertions: assert.Assertions,
		name: name,
		num: float{{.Bits}}(property.Float()),
	}
}

// Equals generates an error if the float value isn't the same as other.
func (assert Float{{.Bits}}Assertions) Equals(other float{{.Bits}}) {
	if assert.num != other {
		assert.Failed(`expected %s to be %d, but it was %d`, assert.name, other, assert.num)
	}
}

// Equals generates an error if the float value is the same as the other.
func (assert Float{{.Bits}}Assertions) NotEquals(other float{{.Bits}}) {
	if assert.num == other {
		assert.Failed(`expected %s to not be %d`, assert.name, other)
	}
}

// GreaterThan generates an error if the float value is less than or equal to the other.
func (assert Float{{.Bits}}Assertions) GreaterThan(other float{{.Bits}}) {
	if assert.num <= other {
		assert.Failed(`expected %s to be greater than %d, but it was %d`, assert.name, other, assert.num)
	}
}

// LessThan generates an error if the float value is greater than or equal to the other.
func (assert Float{{.Bits}}Assertions) LessThan(other float{{.Bits}}) {
	if assert.num >= other {
		assert.Failed(`expected %s to be less than %d, but it was %d`, assert.name, other, assert.num)
	}
}
